
SwitchLedsCount.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  000001f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000235  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000119  00000000  00000000  000004c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000017d  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c6  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013f  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	07 d0       	rcall	.+14     	; 0x114 <main>
 106:	3c c0       	rjmp	.+120    	; 0x180 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <InitialiseGeneral>:
unsigned char countNumber = 0;//count action times of switch

void InitialiseGeneral()
{
	//Congigure Ports
	DDRB = 0xFF;//Set port B direction to OUTPUT,connected to the leds
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;//Set all leds initially off
 10e:	15 b8       	out	0x05, r1	; 5
	
	DDRD= 0x00;//set port D direction INPUT(connect PIND0 with switch)
 110:	1a b8       	out	0x0a, r1	; 10
 112:	08 95       	ret

00000114 <main>:
}

int main(void)
{
	unsigned char PortD_S = 0x00; // store PORTD former status 
    InitialiseGeneral();
 114:	fa df       	rcall	.-12     	; 0x10a <InitialiseGeneral>
				if(10 == countNumber){
					countNumber = 0;
				}
				else if (5 == countNumber)
				{
					PORTB = 0xFF;
 116:	2f ef       	ldi	r18, 0xFF	; 255
{
	unsigned char PortD_S = 0x00; // store PORTD former status 
    InitialiseGeneral();
    while (1) 
    {
		PortD_S = PIND;    //read PIND and store its status to PortD_S
 118:	89 b1       	in	r24, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	e7 ea       	ldi	r30, 0xA7	; 167
 11c:	f1 e6       	ldi	r31, 0x61	; 97
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0xa>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x10>
 124:	00 00       	nop
		_delay_ms(100);   //   1/10th second debouncer
		if(PIND != PortD_S){
 126:	99 b1       	in	r25, 0x09	; 9
 128:	98 17       	cp	r25, r24
 12a:	b1 f3       	breq	.-20     	; 0x118 <main+0x4>
			if(0 == PIND0){         // count increase button enbale
				countNumber++;
 12c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
				if(10 == countNumber){
 136:	8a 30       	cpi	r24, 0x0A	; 10
 138:	19 f4       	brne	.+6      	; 0x140 <main+0x2c>
					countNumber = 0;
 13a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 13e:	1c c0       	rjmp	.+56     	; 0x178 <main+0x64>
				}
				else if (5 == countNumber)
 140:	85 30       	cpi	r24, 0x05	; 5
 142:	d1 f4       	brne	.+52     	; 0x178 <main+0x64>
				{
					PORTB = 0xFF;
 144:	25 b9       	out	0x05, r18	; 5
 146:	83 e2       	ldi	r24, 0x23	; 35
 148:	94 ef       	ldi	r25, 0xF4	; 244
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x36>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x3c>
 150:	00 00       	nop
 152:	e3 e2       	ldi	r30, 0x23	; 35
 154:	f4 ef       	ldi	r31, 0xF4	; 244
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0x42>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x48>
 15c:	00 00       	nop
 15e:	83 e2       	ldi	r24, 0x23	; 35
 160:	94 ef       	ldi	r25, 0xF4	; 244
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x4e>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x54>
 168:	00 00       	nop
 16a:	e3 e2       	ldi	r30, 0x23	; 35
 16c:	f4 ef       	ldi	r31, 0xF4	; 244
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x5a>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x60>
 174:	00 00       	nop
					_delay_ms(250);//Keep leds on for 1 second(250ms*4)
					_delay_ms(250);
					_delay_ms(250);
					_delay_ms(250);
					PORTB = 0x00;
 176:	15 b8       	out	0x05, r1	; 5
				}
			}
			if(0 == PIND1){
				countNumber = 0x00;// reset switch enable
			}
			PORTB = countNumber;
 178:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 17c:	85 b9       	out	0x05, r24	; 5
 17e:	cc cf       	rjmp	.-104    	; 0x118 <main+0x4>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
