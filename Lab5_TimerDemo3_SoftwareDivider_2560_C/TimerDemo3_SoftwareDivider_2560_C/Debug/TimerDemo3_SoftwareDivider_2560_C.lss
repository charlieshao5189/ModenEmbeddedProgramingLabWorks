
TimerDemo3_SoftwareDivider_2560_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001bb  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c8  00000000  00000000  00000503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000214  00000000  00000000  000005cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000007e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001fb  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00000aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00000b72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	a1 c0       	rjmp	.+322    	; 0x188 <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 30       	cpi	r26, 0x04	; 4
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	1c d0       	rcall	.+56     	; 0x13e <main>
 106:	83 c0       	rjmp	.+262    	; 0x20e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <InitialiseGeneral>:
	}
}

void InitialiseGeneral()
{
	DDRB = 0xFF;			// Configure PortB direction for Output
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF;			// Set all LEDs initially off (inverted on the board, so '1' = off)
 10e:	85 b9       	out	0x05, r24	; 5
	
	sei();
 110:	78 94       	sei
 112:	08 95       	ret

00000114 <InitialiseTimer1>:
}

void InitialiseTimer1()		// Configure to generate an interrupt after a 1-Second interval
{
	TCCR1A = 0b00000000;	// Normal port operation (OC1A, OC1B, OC1C), Clear Timer on 'Compare Match' (CTC) waveform mode)
 114:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00001101;	// CTC waveform mode, use prescaler 1024
 118:	8d e0       	ldi	r24, 0x0D	; 13
 11a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCCR1C = 0b00000000;
 11e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
	
	// For 1 MHz clock (with 1024 prescaler) to achieve a 1 second interval:
	// Need to count 1 million clock cycles (but already divided by 1024)
	// So actually need to count to (1000000 / 1024 =) 976 decimal, = 3D0 Hex
	OCR1AH = 0x03; // Output Compare Registers (16 bit) OCR1BH and OCR1BL
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0xD0;
 128:	80 ed       	ldi	r24, 0xD0	; 208
 12a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	TCNT1H = 0b00000000;	// Timer/Counter count/value registers (16 bit) TCNT1H and TCNT1L
 12e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	TCNT1L = 0b00000000;
 132:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 = 0b00000010;	// bit 1 OCIE1A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
 13c:	08 95       	ret

0000013e <main>:
unsigned char LED3_count;
unsigned char LED3_interval;

int main( void )
{
	InitialiseGeneral();
 13e:	e5 df       	rcall	.-54     	; 0x10a <InitialiseGeneral>
	LED7_count = 0;			// Initialise the count to 0
 140:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <LED7_count>
	LED7_interval = 5;		// Set the interval for LED7 blinking
 144:	85 e0       	ldi	r24, 0x05	; 5
 146:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <LED7_interval>
	
	LED3_count = 0;			// Initialise the count to 0
 14a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <LED3_count>
	LED3_interval = 3;		// Set the interval for LED7 blinking
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	

	InitialiseTimer1();
 154:	df df       	rcall	.-66     	; 0x114 <InitialiseTimer1>
	
	while(1)        	// Loop
	{
		// In this example all the application logic is within the Timer1 interrupt handler
	}
 156:	ff cf       	rjmp	.-2      	; 0x156 <main+0x18>

00000158 <Toggle_LED0>:
}

void Toggle_LED0()	// Swap the value of port B bit 0 (if 0, set to 1; if 1 set to 0)
{
	unsigned char temp;
	temp = PINB;			// (Can actually read the port value even when its set as output)
 158:	83 b1       	in	r24, 0x03	; 3
	if(temp & 0b00000001)	// Bitwise version of AND - Check if bit 0 is currently set '1'
 15a:	80 ff       	sbrs	r24, 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <Toggle_LED0+0xa>
	{
		temp &= 0b11111110;	// Currently set, so force it to '0' without changing other bits
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	01 c0       	rjmp	.+2      	; 0x164 <Toggle_LED0+0xc>
	}
	else
	{
		temp |= 0b00000001;	// Currently cleared, so force it to '1' without changing other bits
 162:	81 60       	ori	r24, 0x01	; 1
	}
	PORTB = temp;
 164:	85 b9       	out	0x05, r24	; 5
 166:	08 95       	ret

00000168 <Toggle_LED3>:
}
void Toggle_LED3()	// Swap the value of port B bit 0 (if 0, set to 1; if 1 set to 0)
{
	unsigned char temp;
	temp = PINB;			// (Can actually read the port value even when its set as output)
 168:	83 b1       	in	r24, 0x03	; 3
	if(temp & 0b00001000)	// Check if bit 7 is currently set '1'
 16a:	83 ff       	sbrs	r24, 3
 16c:	02 c0       	rjmp	.+4      	; 0x172 <Toggle_LED3+0xa>
	{
		temp &= 0b1110111;	// Currently set, so force it to '0' without changing other bits
 16e:	87 77       	andi	r24, 0x77	; 119
 170:	01 c0       	rjmp	.+2      	; 0x174 <Toggle_LED3+0xc>
	}
	else
	{
		temp |= 0b00001000;	// Currently cleared, so force it to '1' without changing other bits
 172:	88 60       	ori	r24, 0x08	; 8
	}
	PORTB = temp;
 174:	85 b9       	out	0x05, r24	; 5
 176:	08 95       	ret

00000178 <Toggle_LED7>:
}
void Toggle_LED7()	// Swap the value of port B bit 7 (if 0, set to 1; if 1 set to 0)
{
	unsigned char temp;
	temp = PINB;			// (Can actually read the port value even when its set as output)
 178:	83 b1       	in	r24, 0x03	; 3
	if(temp & 0b10000000)	// Check if bit 7 is currently set '1'
 17a:	88 23       	and	r24, r24
 17c:	14 f4       	brge	.+4      	; 0x182 <Toggle_LED7+0xa>
	{
		temp &= 0b01111111;	// Currently set, so force it to '0' without changing other bits
 17e:	8f 77       	andi	r24, 0x7F	; 127
 180:	01 c0       	rjmp	.+2      	; 0x184 <Toggle_LED7+0xc>
	}
	else
	{
		temp |= 0b10000000;	// Currently cleared, so force it to '1' without changing other bits
 182:	80 68       	ori	r24, 0x80	; 128
	}
	PORTB = temp;
 184:	85 b9       	out	0x05, r24	; 5
 186:	08 95       	ret

00000188 <__vector_17>:
	TIMSK1 = 0b00000010;	// bit 1 OCIE1A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
	// when the timer reaches the set value (in the OCR1A register)
}

ISR(TIMER1_COMPA_vect) // TIMER1_CompareA_Handler (Interrupt Handler for Timer 1)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	0b b6       	in	r0, 0x3b	; 59
 194:	0f 92       	push	r0
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	Toggle_LED0();		// Bit 0 is toggled every time the interrupt occurs
 1ae:	d4 df       	rcall	.-88     	; 0x158 <Toggle_LED0>
	
	// SoftwareDivider logic, counts a number of interrupts, before taking action
	LED7_count++;
 1b0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <LED7_count>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <LED7_count>
	if(LED7_count == LED7_interval)		// Have we reached the required number of interrupts?
 1ba:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <LED7_interval>
 1be:	89 13       	cpse	r24, r25
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <__vector_17+0x40>
	{
		LED7_count = 0;					// Reset the software counter for this event
 1c2:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <LED7_count>
		Toggle_LED7();					// Yes - so change the LED value
 1c6:	d8 df       	rcall	.-80     	; 0x178 <Toggle_LED7>
	}
	LED3_count++;
 1c8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <LED3_count>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <LED3_count>
	if(LED3_count == LED3_interval)		// Have we reached the required number of interrupts?
 1d2:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <_edata>
 1d6:	89 13       	cpse	r24, r25
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <__vector_17+0x58>
	{
		LED3_count = 0;					// Reset the software counter for this event
 1da:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <LED3_count>
		Toggle_LED3();					// Yes - so change the LED value
 1de:	c4 df       	rcall	.-120    	; 0x168 <Toggle_LED3>
	}
	

	// Reset the count value back to zero (needed when using 'normal mode')
	// Alternatively, if CTC mode is used the timer is automatically cleared
	TCNT1H = 0x00;
 1e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	TCNT1L = 0x00;
 1e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0b be       	out	0x3b, r0	; 59
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
