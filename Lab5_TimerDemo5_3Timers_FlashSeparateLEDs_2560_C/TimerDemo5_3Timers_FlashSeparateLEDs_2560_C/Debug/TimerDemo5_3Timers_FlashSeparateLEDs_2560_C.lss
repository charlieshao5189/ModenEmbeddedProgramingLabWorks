
TimerDemo5_3Timers_FlashSeparateLEDs_2560_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001e7  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000cf  00000000  00000000  000005bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027f  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000231  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e9  00000000  00000000  00000cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00000fc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	d2 c0       	rjmp	.+420    	; 0x1ea <__vector_17>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	95 c0       	rjmp	.+298    	; 0x188 <__vector_23>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	e5 c0       	rjmp	.+458    	; 0x24c <__vector_32>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	3a d0       	rcall	.+116    	; 0x16a <main>
  f6:	d1 c0       	rjmp	.+418    	; 0x29a <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <InitialiseGeneral>:
	}
}

void InitialiseGeneral()
{
	DDRB = 0xFF;			// Configure PortB direction for Output
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xA5;			// Set all LEDs initially off (inverted on the board, so '1' = off)
  fe:	85 ea       	ldi	r24, 0xA5	; 165
 100:	85 b9       	out	0x05, r24	; 5
	
	sei();
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <InitialiseTimer0>:
}

void InitialiseTimer0()		// Configure to generate an interrupt after a 1/4 Second interval
{
	TCCR0A = 0b00000000;	// Normal port operation (OC0A, OC0B), Normal waveform generation
 106:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000101;	// Normal waveform generation, Use 1024 prescaler
 108:	85 e0       	ldi	r24, 0x05	; 5
 10a:	85 bd       	out	0x25, r24	; 37
	// So 8 bar movements (full range) will happen in 1/4 second

	// For 1 MHz clock (with 1024 prescaler) Overflow occurs after counting to 256
	// (but already divided by 1024)
	// So overflow occurs after 1024 * 256 / 1000000 = 0.26 seconds
	TCNT0 = 0b00000000;	// Timer/Counter count/value register
 10c:	16 bc       	out	0x26, r1	; 38

	TIMSK0 = 0b00000001;		// Use 'Overflow' Interrupt, i.e. generate an interrupt
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
 114:	08 95       	ret

00000116 <InitialiseTimer1>:
	Toggle_LED0();		// Bit 0 is toggled every time the interrupt occurs
}

void InitialiseTimer1()		// Configure to generate an interrupt after a 2-Second interval
{
	TCCR1A = 0b00000000;	// Normal port operation (OC1A, OC1B, OC1C), Clear Timer on 'Compare Match' (CTC) waveform mode)
 116:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0b00001101;	// CTC waveform mode, use prescaler 1024
 11a:	8d e0       	ldi	r24, 0x0D	; 13
 11c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	TCCR1C = 0b00000000;
 120:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
	
	// For 1 MHz clock (with 1024 prescaler) to achieve a 2 second interval:
	// Need to count 2 million clock cycles (but already divided by 1024)
	// So actually need to count to (2000000 / 1024 =) 1953 decimal, = 7A1 Hex
	OCR1AH = 0x07; // Output Compare Registers (16 bit) OCR1BH and OCR1BL
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0xA1;
 12a:	81 ea       	ldi	r24, 0xA1	; 161
 12c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	TCNT1H = 0b00000000;	// Timer/Counter count/value registers (16 bit) TCNT1H and TCNT1L
 130:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
	TCNT1L = 0b00000000;
 134:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TIMSK1 = 0b00000010;	// bit 1 OCIE1A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x70006f>
 13e:	08 95       	ret

00000140 <InitialiseTimer3>:
	Toggle_LED3();		// Bit 3 is toggled every time the interrupt occurs
}

void InitialiseTimer3()		// Configure to generate an interrupt after a 0.5 Second interval
{
	TCCR3A = 0b00000000;	// Normal port operation (OC1A, OC1B, OC1C), Clear Timer on 'Compare Match' (CTC) waveform mode)
 140:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00001101;	// CTC waveform mode, use prescaler 1024
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TCCR3C = 0b00000000;
 14a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__TEXT_REGION_LENGTH__+0x700092>
	
	// For 1 MHz clock (with 1024 prescaler) to achieve a 0.5 second interval:
	// Need to count 500,000 clock cycles (but already divided by 1024)
	// So actually need to count to (500000 / 1024 =) 488 decimal, = 1E8 Hex
	OCR3AH = 0x01; // Output Compare Registers (16 bit) OCR1BH and OCR1BL
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
	OCR3AL = 0xE8;
 154:	88 ee       	ldi	r24, 0xE8	; 232
 156:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	TCNT3H = 0b00000000;	// Timer/Counter count/value registers (16 bit) TCNT3H and TCNT3L
 15a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
	TCNT3L = 0b00000000;
 15e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	TIMSK3 = 0b00000010;	// bit 1 OCIE3A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 168:	08 95       	ret

0000016a <main>:
void Toggle_LED3();
void Toggle_LED6();

int main( void )
{
	InitialiseGeneral();
 16a:	c7 df       	rcall	.-114    	; 0xfa <InitialiseGeneral>

	InitialiseTimer0();
 16c:	cc df       	rcall	.-104    	; 0x106 <InitialiseTimer0>
	InitialiseTimer1();
 16e:	d3 df       	rcall	.-90     	; 0x116 <InitialiseTimer1>
	InitialiseTimer3();
 170:	e7 df       	rcall	.-50     	; 0x140 <InitialiseTimer3>
	
	while(1)        	// Loop
	{
		// In this example all the application logic is within the Timer1 interrupt handler
	}
 172:	ff cf       	rjmp	.-2      	; 0x172 <main+0x8>

00000174 <Toggle_LED0>:
}

void Toggle_LED0()	// Swap the value of port B bit 0 (if 0, set to 1; if 1 set to 0)
{
	unsigned char temp;		// Local variable (private to this function)
	temp = PINB;			// (Can actually read the port value even when its set as output)
 174:	83 b1       	in	r24, 0x03	; 3
	if(temp & 0b00000001)	// Bitwise version of AND - Check if bit 0 is currently set '1'
 176:	80 ff       	sbrs	r24, 0
 178:	03 c0       	rjmp	.+6      	; 0x180 <Toggle_LED0+0xc>
	{
		temp &= 0b11111110;	// Currently set, so force PortB bit0 to '0' without changing other bits
 17a:	8e 7f       	andi	r24, 0xFE	; 254
		temp |= 0b00000010; // force PortB bit1 to '0' without changing other bits
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	02 c0       	rjmp	.+4      	; 0x184 <Toggle_LED0+0x10>
	}
	else
	{
		temp |= 0b00000001;	// Currently cleared, so force it to '1' without changing other bits
		temp &= 0b11111101; // force PortB bit1 to '0' without changing other bits
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	81 60       	ori	r24, 0x01	; 1
	}
	PORTB = temp;
 184:	85 b9       	out	0x05, r24	; 5
 186:	08 95       	ret

00000188 <__vector_23>:
	TIMSK0 = 0b00000001;		// Use 'Overflow' Interrupt, i.e. generate an interrupt
	// when the timer reaches its maximum count value
}

ISR(TIMER0_OVF_vect) // TIMER0_Overflow_Handler (Interrupt Handler for Timer 0)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	0b b6       	in	r0, 0x3b	; 59
 194:	0f 92       	push	r0
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	Toggle_LED0();		// Bit 0 is toggled every time the interrupt occurs
 1ae:	e2 df       	rcall	.-60     	; 0x174 <Toggle_LED0>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0b be       	out	0x3b, r0	; 59
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <Toggle_LED3>:
}

void Toggle_LED3()	// Swap the value of port B bit 3 (if 0, set to 1; if 1 set to 0)
{
	unsigned char temp;		// Local variable (private to this function)
	temp = PINB;			// (Can actually read the port value even when its set as output)
 1d6:	83 b1       	in	r24, 0x03	; 3
	if(temp & 0b00001000)	// Check if bit 3 is currently set '1'
 1d8:	83 ff       	sbrs	r24, 3
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <Toggle_LED3+0xc>
	{
		temp &= 0b11110111;	// Currently set, so force it to '0' without changing other bits
 1dc:	87 7f       	andi	r24, 0xF7	; 247
		temp |= 0b00010000;
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <Toggle_LED3+0x10>
	}
	else
	{
		temp |= 0b00001000;	// Currently cleared, so force it to '1' without changing other bits
	    temp &= 0b11101111;
 1e2:	8f 7e       	andi	r24, 0xEF	; 239
 1e4:	88 60       	ori	r24, 0x08	; 8
	}
	PORTB = temp;
 1e6:	85 b9       	out	0x05, r24	; 5
 1e8:	08 95       	ret

000001ea <__vector_17>:
	TIMSK1 = 0b00000010;	// bit 1 OCIE1A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
	// when the timer reaches the set value (in the OCR1A registers)
}

ISR(TIMER1_COMPA_vect) // TIMER1_CompareA_Handler (Interrupt Handler for Timer 1)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	0b b6       	in	r0, 0x3b	; 59
 1f6:	0f 92       	push	r0
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	6f 93       	push	r22
 202:	7f 93       	push	r23
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
 208:	af 93       	push	r26
 20a:	bf 93       	push	r27
 20c:	ef 93       	push	r30
 20e:	ff 93       	push	r31
	Toggle_LED3();		// Bit 3 is toggled every time the interrupt occurs
 210:	e2 df       	rcall	.-60     	; 0x1d6 <Toggle_LED3>
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0b be       	out	0x3b, r0	; 59
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <Toggle_LED6>:
}

void Toggle_LED6()	// Swap the value of port B bit 6 (if 0, set to 1; if 1 set to 0)
{
	unsigned char temp;		// Local variable (private to this function)
	temp = PINB;			// (Can actually read the port value even when its set as output)
 238:	83 b1       	in	r24, 0x03	; 3
	if(temp & 0b01000000)	// Check if bit 6 is currently set '1'
 23a:	86 ff       	sbrs	r24, 6
 23c:	03 c0       	rjmp	.+6      	; 0x244 <Toggle_LED6+0xc>
	{
		temp &= 0b10111111;	// Currently set, so force it to '0' without changing other bits
 23e:	8f 7b       	andi	r24, 0xBF	; 191
		temp |= 0b10000000;
 240:	80 68       	ori	r24, 0x80	; 128
 242:	02 c0       	rjmp	.+4      	; 0x248 <Toggle_LED6+0x10>
	}
	else
	{
		temp |= 0b01000000;	// Currently cleared, so force it to '1' without changing other bits
	    temp &= 0b01111111;
 244:	8f 77       	andi	r24, 0x7F	; 127
 246:	80 64       	ori	r24, 0x40	; 64
	}
	PORTB = temp;
 248:	85 b9       	out	0x05, r24	; 5
 24a:	08 95       	ret

0000024c <__vector_32>:
	TIMSK3 = 0b00000010;	// bit 1 OCIE3A		Use 'Output Compare A Match' Interrupt, i.e. generate an interrupt
	// when the timer reaches the set value (in the OCR3A registers)
}

ISR(TIMER3_COMPA_vect) // TIMER3_Overflow_Handler (Interrupt Handler for Timer 3)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	0b b6       	in	r0, 0x3b	; 59
 258:	0f 92       	push	r0
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	4f 93       	push	r20
 260:	5f 93       	push	r21
 262:	6f 93       	push	r22
 264:	7f 93       	push	r23
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	af 93       	push	r26
 26c:	bf 93       	push	r27
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
	Toggle_LED6();		// Bit 6 is toggled every time the interrupt occurs
 272:	e2 df       	rcall	.-60     	; 0x238 <Toggle_LED6>
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	bf 91       	pop	r27
 27a:	af 91       	pop	r26
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	7f 91       	pop	r23
 282:	6f 91       	pop	r22
 284:	5f 91       	pop	r21
 286:	4f 91       	pop	r20
 288:	3f 91       	pop	r19
 28a:	2f 91       	pop	r18
 28c:	0f 90       	pop	r0
 28e:	0b be       	out	0x3b, r0	; 59
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
